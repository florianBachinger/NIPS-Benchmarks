import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from scipy.interpolate import griddata
import matplotlib.cm as cm
from matplotlib.colors import Normalize

#--------------------- plot a linear approximated contour plot -------------------------
# the benchmarks are sampled from a log10 based distribution of values skewed toward 
# their minimum value. The contourf plot however requries an equidistant grid of values.
# We generate this grid and use linear approximation to estimate a value for y at the 
# given grid coordinates. This allows us to plot a contour plot for sampled data.
def PlotContour(training, test, target, axis, norm, cmap):
  full = pd.concat([training, test])
  zi = full[target]
  x = full['x1']
  y = full['x0']
  # sigma in [0.1,10] and theta in [-10,0.1]u[0.1,10]
  # is the actual range generated by the FeynmanICh6Eq20 benchmark
  grid_x, grid_y = np.mgrid[0.1:10:1000j, -10:10:1000j]
  grid_z0 = griddata((x,y), zi, (grid_x, grid_y), method='linear')

  
  axis.contourf(grid_x, grid_y, grid_z0, cmap= cmap , norm= norm)
  # sns.scatterplot(ax = axis, x=training['x1'], y=training['x0'], c = 'g', s = 8,  marker='x')
  # sns.scatterplot(ax = axis, x=test['x1'], y=test['x0'], c = 'b', s = 8,  marker='x')
  #only print a subset of the space sigma x theta \in [0.1,10]x[-10,10]
  #to increase the resolution of the interesting interaction
  # axis.set_xlim([0.1,0.5])
  # axis.set_ylim([-0.6,0.6])
  
plt.close()
folder= f'./scpr_experiments/visualization/FeynmanICh6Eq20/'
if not os.path.exists(folder):
          os.makedirs(folder)
summary = pd.read_csv('./scpr_experiments/results/summary.csv')
summary = summary[summary['EquationName'] == 'FeynmanICh6Eq20']
summary = summary[summary['Successful'] == True]
summary = summary.sort_values(['RMSE_Test'], ascending=True)
summary = summary.head(3)
for (index,row) in summary.iterrows():
    print(row)
    data = pd.read_csv(row['DataTargetFile'])
    training = data[data['split'] == 'training']
    test = data[data['split'] == 'test']
    fig, ax = plt.subplots(1,2, figsize=(16,8),  sharey=True)

    norm = Normalize( vmin=np.min([data['f'],data['Predicted']]), vmax=np.max([data['f'],data['Predicted']]))
    cmap = cm.get_cmap('coolwarm')

    # ---------------------------------------------------------------------------------
    # --------------------- plot benchmark instance WITHOUT noise ---------------------
    # ---------------------------------------------------------------------------------
    PlotContour(training, test,'f', ax[0], norm, cmap)
    PlotContour(training, test,'Predicted', ax[1], norm, cmap)

    plt.savefig(f'{folder}{row["RMSE_Test"]}_{index}.png')
    plt.clf()
    plt.close()